$output.webapp("app/entities/${entity.model.var}/${entity.model.var}-list.component.ts")##
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Router } from '@angular/router';
import { DataTable } from 'primeng/primeng';
import { LazyLoadEvent } from 'primeng/primeng';
import { PageResponse } from "../../support/paging";
import { MessageService } from '../../service/message.service';
import { $entity.model.type } from './${entity.model.var}';
import { ${entity.model.type}DetailComponent } from './${entity.model.var}-detail.component';
import { $entity.service.type } from './${entity.model.var}.service';

#foreach ($relation in $entity.xToOne.list)
#if(!$relation.to.type.equals($entity.model.type))
import { $relation.to.type } from '../$relation.toEntity.model.var/$relation.toEntity.model.var';
#end
import { ${relation.to.type}LineComponent } from '../$relation.toEntity.model.var/${relation.toEntity.model.var}-line.component';
#end

@Component({
    moduleId: module.id,
	templateUrl: '${entity.model.var}-list.component.html',
	selector: '${entity.model.var}-list',
})
export class ${entity.model.type}ListComponent {

    @Input() header = "${entity.model.varsUp}...";

    // When 'sub' is true, it means this list is used as a one-to-many list.
    // It belongs to a parent entity, as a result the addNew operation
    // must prefill the parent entity. The prefill is not done here, instead we
    // emit an event.
    // When 'sub' is false, we display basic search criterias
    @Input() sub : boolean;
    @Output() onAddNewClicked = new EventEmitter();

    ${entity.model.var}ToDelete : $entity.model.type;
    displayDeleteDialog : boolean;

    // basic search criterias (visible if not in 'sub' mode)
    example : $entity.model.type = new ${entity.model.type}();

    // list is paginated
    currentPage : PageResponse<$entity.model.type> = new PageResponse<$entity.model.type>(0,0,[]);

## --------------- Many to One
#foreach ($relation in $entity.manyToOne.list)
#if ($velocityCount == 1)
    // Many to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
#end
    private _$relation.to.var : $relation.to.type;
#end

    constructor(private router:Router, private $entity.service.var : $entity.service.type, private messageService : MessageService) { }

    /**
     * Invoked when user presses the search button.
     */
    search(dt : DataTable) {
        if (!this.sub) {
            dt.reset();
            this.loadPage({ first: 0, rows: dt.rows, sortField: dt.sortField, sortOrder: dt.sortOrder, filters: null, multiSortMeta: dt.multiSortMeta });
        }
    }

    /**
     * Invoked automatically by primeng datatable.
     */
    loadPage(event : LazyLoadEvent) {
        this.${entity.service.var}.getPage(this.example, event).
            subscribe(
                pageResponse => this.currentPage = pageResponse,
                error => this.messageService.error('Could not get the results', error)
            );
    }
## --------------- Many to One
#foreach ($relation in $entity.manyToOne.list)
#if ($velocityCount == 1)

    // Many to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
#end
    @Input()
    set ${relation.to.var}($relation.to.var : $relation.to.type) {
        if ($relation.to.var == null) {
            return;
        }
        this._$relation.to.var = $relation.to.var;

        this.example = new ${entity.model.type}();
        this.example.$relation.to.var = new ${relation.to.type}();
        this.example.${relation.to.var}.${identifiableProperty.var} = this._${relation.to.var}.${identifiableProperty.var};
    }

#end

    onRowSelect(event : any) {
        this.router.navigate(['/${entity.model.var}', event.data.${identifiableProperty.var}]);
    }

    addNew() {
        if (this.sub) {
            this.onAddNewClicked.emit("addNew");
        } else {
            this.router.navigate(['/${entity.model.var}', 'new']);
        }
    }

    showDeleteDialog(rowData : any) {
        this.${entity.model.var}ToDelete = <$entity.model.type> rowData;
        this.displayDeleteDialog = true;
    }

    /**
     * Invoked when user presses 'Delete' in the delete dialog. Deletes the entity on
     * the server side an remove the row from the page.
     */
    delete() {
        this.${entity.service.var}.delete(this.${entity.model.var}ToDelete.${identifiableProperty.var}).
            subscribe(
                response => {
                    this.currentPage.remove(this.${entity.model.var}ToDelete);
                    this.displayDeleteDialog = false;
                    this.${entity.model.var}ToDelete = null;
                    this.messageService.info('Deleted OK', 'Angular Rocks!');
                },
                error => this.messageService.error('Could not delete!', error)
            );
    }
}